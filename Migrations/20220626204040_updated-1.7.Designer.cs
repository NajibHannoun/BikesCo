// <auto-generated />
using System;
using BikesTest.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BikesTest.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220626204040_updated-1.7")]
    partial class updated17
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BikesTest.Models.Admin", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("isCurrentlyLogged")
                        .HasColumnType("bit");

                    b.Property<bool>("isSuspended")
                        .HasColumnType("bit");

                    b.Property<int?>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("user_id")
                        .IsUnique()
                        .HasFilter("[user_id] IS NOT NULL");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("BikesTest.Models.Bicycle", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("aquisutionDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("earningsToDate")
                        .HasColumnType("float");

                    b.Property<bool>("isCurrentlyRented")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("lastCheckupDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("leassPrice")
                        .HasColumnType("float");

                    b.Property<double>("purchasePrice")
                        .HasColumnType("float");

                    b.Property<int>("size")
                        .HasColumnType("int");

                    b.Property<int>("timesRented")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Bicycles");
                });

            modelBuilder.Entity("BikesTest.Models.Customer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("isCurrentlyBiking")
                        .HasColumnType("bit");

                    b.Property<int>("numberOfBikesRented")
                        .HasColumnType("int");

                    b.Property<decimal>("timeBiked")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("user_id")
                        .IsUnique()
                        .HasFilter("[user_id] IS NOT NULL");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BikesTest.Models.Transaction", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("admin_Id")
                        .HasColumnType("int");

                    b.Property<int>("bicycle_Id")
                        .HasColumnType("int");

                    b.Property<double?>("costOfTransaction")
                        .HasColumnType("float");

                    b.Property<int>("customer_Id")
                        .HasColumnType("int");

                    b.Property<decimal?>("durationOfTransaction")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("rentalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("returnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("transactionType")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("admin_Id");

                    b.HasIndex("bicycle_Id");

                    b.HasIndex("customer_Id");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("BikesTest.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BikesTest.Models.Admin", b =>
                {
                    b.HasOne("BikesTest.Models.User", "user")
                        .WithOne("admin")
                        .HasForeignKey("BikesTest.Models.Admin", "user_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("user");
                });

            modelBuilder.Entity("BikesTest.Models.Customer", b =>
                {
                    b.HasOne("BikesTest.Models.User", "user")
                        .WithOne("customer")
                        .HasForeignKey("BikesTest.Models.Customer", "user_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("user");
                });

            modelBuilder.Entity("BikesTest.Models.Transaction", b =>
                {
                    b.HasOne("BikesTest.Models.Admin", "admin")
                        .WithMany("transactions")
                        .HasForeignKey("admin_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BikesTest.Models.Bicycle", "bicycle")
                        .WithMany("transactions")
                        .HasForeignKey("bicycle_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BikesTest.Models.Customer", "customer")
                        .WithMany("transactions")
                        .HasForeignKey("customer_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("admin");

                    b.Navigation("bicycle");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("BikesTest.Models.Admin", b =>
                {
                    b.Navigation("transactions");
                });

            modelBuilder.Entity("BikesTest.Models.Bicycle", b =>
                {
                    b.Navigation("transactions");
                });

            modelBuilder.Entity("BikesTest.Models.Customer", b =>
                {
                    b.Navigation("transactions");
                });

            modelBuilder.Entity("BikesTest.Models.User", b =>
                {
                    b.Navigation("admin");

                    b.Navigation("customer");
                });
#pragma warning restore 612, 618
        }
    }
}
